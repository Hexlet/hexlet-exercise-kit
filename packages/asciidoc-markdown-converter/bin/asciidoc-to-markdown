#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Get command line argument - just the input file
const inputFilePath = process.argv[2];

if (!inputFilePath) {
  console.error('Usage: asciidoc-to-markdown input.adoc');
  process.exit(1);
}

// Convert to absolute path if it's not already
const absoluteInputPath = path.isAbsolute(inputFilePath)
  ? inputFilePath
  : path.resolve(process.cwd(), inputFilePath);

// Check if input file exists
if (!fs.existsSync(absoluteInputPath)) {
  console.error(`Error: Input file '${absoluteInputPath}' not found`);
  process.exit(1);
}

try {
  // Get directory and file name components
  const inputDir = path.dirname(absoluteInputPath);
  const inputBaseName = path.basename(absoluteInputPath, path.extname(absoluteInputPath));

  // Change to the input file's directory before running downdoc
  const originalDir = process.cwd();
  process.chdir(inputDir);

  // Run downdoc with its default behavior (it will create a .md file in the same directory)
  console.log(`Converting ${inputBaseName}${path.extname(absoluteInputPath)} using downdoc...`);
  execSync(`npx downdoc "${inputBaseName}${path.extname(absoluteInputPath)}"`, { encoding: 'utf8' });

  // Determine the output file path that downdoc created
  const outputFileName = `${inputBaseName}.md`;
  const outputFilePath = path.join(inputDir, outputFileName);

  // Make sure the output file exists
  if (!fs.existsSync(outputFilePath)) {
    console.error(`Error: Expected output file '${outputFilePath}' not found`);
    process.chdir(originalDir); // Change back to original directory
    process.exit(1);
  }

  console.log(`Fixing formatting issues in ${outputFilePath}...`);

  // Read the markdown generated by downdoc
  let content = fs.readFileSync(outputFilePath, 'utf8');

  // Fix heading marks
  content = content.split('<mark>#</mark>').join('###');
  content = content.split('<mark>##</mark>').join('###');
  content = content.split('<mark>###</mark>').join('###');

  // Remove all remaining <mark> tags
  while (content.includes('<mark>') && content.includes('</mark>')) {
    const startIdx = content.indexOf('<mark>');
    const endIdx = content.indexOf('</mark>') + 7;

    if (startIdx !== -1 && endIdx !== -1) {
      const beforeMark = content.substring(0, startIdx);
      const markContent = content.substring(startIdx + 6, endIdx - 7);
      const afterMark = content.substring(endIdx);

      content = beforeMark + markContent + afterMark;
    } else {
      break;
    }
  }

  // Replace triple asterisks with double
  content = content.split('***').join('**');

  // Write the fixed content back to the same file
  fs.writeFileSync(outputFilePath, content, 'utf8');

  // Change back to original directory
  process.chdir(originalDir);

  console.log(`Conversion complete: ${outputFilePath}`);
} catch (error) {
  console.error('Error:', error.message);
  process.exit(1);
}
